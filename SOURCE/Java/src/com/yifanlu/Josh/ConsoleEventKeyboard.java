package com.yifanlu.Josh;

/**
 * Describes a keyboard input event.
 *
 * @see <a href="http://msdn.microsoft.com/en-us/library/ms684166(v=VS.85).aspx">Windows' KEY_EVENT_RECORD structure</a>
 * @see JoshInBuffer
 * @author Yifan Lu
 * @version 1.3, 05/29/10
 * @since 0.1
 */
public class ConsoleEventKeyboard extends ConsoleEvent {

    private boolean keyDown;
    private int repeatCount;
    private int virtualKeyCode;
    private int virtualScanCode;
    private char character;
    private int controlKeyState;

    /**
     * Creates a new keyboard event.
     *
     * @param keyDown If the key is pressed, this member is true. Otherwise, this member is false (the key is released).
     * @param repeatCount The repeat count, which indicates that a key is being held down. For example, when a key is 
     *	held down, you might get five events with this member equal to 1, one event with this member equal to 5, or multiple
     *	events with this member greater than or equal to 1.
     * @param virtualKeyCode A <a href="http://msdn.microsoft.com/en-us/library/ms645540(v=VS.85).aspx">virtual-key code</a> 
     *	that identifies the given key in a device-independent manner.
     * @param virtualScanCode The virtual scan code of the given key that represents the device-dependent value generated by
     *	the keyboard hardware.
     * @param character The character of the key pressed.
     * @param controlKeyState The state of the control keys. Use constants in {@link ConsoleEvent} to compare and set.
     */
    public ConsoleEventKeyboard(boolean keyDown, int repeatCount, int virtualKeyCode, int virtualScanCode, char character, int controlKeyState) {
        this.eventType = ConsoleEvent.KEY_EVENT;
        this.keyDown = keyDown;
        this.repeatCount = repeatCount;
        this.virtualKeyCode = virtualKeyCode;
        this.virtualScanCode = virtualScanCode;
        this.character = character;
        this.controlKeyState = controlKeyState;
    }

    /**
     * Is the key held down?
     *
     * @return If the key is pressed, this member is true. Otherwise, this member is false (the key is released).
     */
    public boolean getKeyDown() {
        return this.keyDown;
    }

    /**
     * Gets how many times the key is pressed.
     *
     * @return The repeat count, which indicates that a key is being held down. For example, when a key is
     *	held down, you might get five events with this member equal to 1, one event with this member equal to 5, or multiple
     *	events with this member greater than or equal to 1.
     */
    public int getRepeatCount() {
        return this.repeatCount;
    }

    /**
     * Gets the key number on the current keyboard.
     *
     * @return A <a href="http://msdn.microsoft.com/en-us/library/ms645540(v=VS.85).aspx">virtual-key code</a>
     *	that identifies the given key in a device-independent manner.
     */
    public int getVirtualKeyCode() {
        return this.virtualKeyCode;
    }

    /**
     * Gets the scan code on the current keyboard.
     *
     * @return The virtual scan code of the given key that represents the device-dependent value generated by
     *	the keyboard hardware.
     */
    public int getVirtualScanCode() {
        return this.virtualScanCode;
    }

    /**
     * Gets the key pressed as a char.
     *
     * @return The char value of the key pressed.
     */
    public char getChar() {
        return this.character;
    }

    /**
     * Gets any control keys pressed.
     * Use constants in {@link ConsoleEvent} to compare, and the OR operator to mix and match. For example:<br />
     * {@code if((ConsoleEventKeyboard)keyEvent.getControlKeyState() == (ConsoleEvent.CAPSLOCK_ON | LEFT_ALT_PRESSED)); }<br />
     * would check if the caps lock is on AND left alt key is held.
     *
     * @return The state of the control keys.
     */
    public int getControlKeyState() {
        return this.controlKeyState;
    }

    /**
     * Is the key held down?
     *
     * @param keyDown If the key is pressed, this member is true. Otherwise, this member is false (the key is released).
     */
    public void setKeyDown(boolean keyDown) {
        this.keyDown = keyDown;
    }

    /**
     * Sets how many times the key is pressed.
     *
     * @param repeatCount The repeat count, which indicates that a key is being held down. For example, when a key is
     *	held down, you might get five events with this member equal to 1, one event with this member equal to 5, or multiple
     *	events with this member greater than or equal to 1.
     */
    public void setRepeatCount(int repeatCount) {
        this.repeatCount = repeatCount;
    }

    /**
     * Sets the key number on the current keyboard.
     *
     * @param virtualKeyCode A <a href="http://msdn.microsoft.com/en-us/library/ms645540(v=VS.85).aspx">virtual-key code</a>
     *	that identifies the given key in a device-independent manner.
     */
    public void setVirtualKeyCode(int virtualKeyCode) {
        this.virtualKeyCode = virtualKeyCode;
    }

    /**
     * Sets the scan code on the current keyboard.
     *
     * @param virtualScanCode The virtual scan code of the given key that represents the device-dependent value generated by
     *	the keyboard hardware.
     */
    public void setVirtualScanCode(int virtualScanCode) {
        this.virtualScanCode = virtualScanCode;
    }

    /**
     * Sets the key pressed as a char.
     *
     * @param character The char value of the key pressed.
     */
    public void setChar(char character) {
        this.character = character;
    }

    /**
     * Sets any control keys pressed.
     * Use constants from {@link ConsoleEvent}.
     *
     * @param controlKeyState The state of the control keys.
     */
    public void setControlKeyState(int controlKeyState) {
        this.controlKeyState = controlKeyState;
    }

    /**
     * Compares two Objects, if both are ConsoleEventKeyboard and have the same values, they are equal.
     *
     * @param anObject Another ConsoleEventKeyboard object.
     * @return true if all values are equal.
     */
    @Override
    public boolean equals(Object anObject) {
        if (anObject instanceof ConsoleEventKeyboard) {
            ConsoleEventKeyboard otherObject = (ConsoleEventKeyboard) anObject;
            return (this.getKeyDown() == otherObject.getKeyDown()) && (this.getRepeatCount() == otherObject.getRepeatCount()) && (this.getVirtualKeyCode() == otherObject.getVirtualKeyCode()) && (this.getVirtualScanCode() == otherObject.getVirtualScanCode()) && (this.getChar() == otherObject.getChar()) && (this.getControlKeyState() == otherObject.getControlKeyState());
        } else {
            return false;
        }
    }

    /**
     * Returns a hash code.
     *
     * @return a hash code value for this object.
     */
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 37 * hash + (this.keyDown ? 1 : 0);
        hash = 37 * hash + this.repeatCount;
        hash = 37 * hash + this.virtualKeyCode;
        hash = 37 * hash + this.virtualScanCode;
        hash = 37 * hash + this.character;
        hash = 37 * hash + this.controlKeyState;
        return hash;
    }

    /**
     * A {@link java.lang.String} representation of this object.
     *
     * @return The character represented by the key pressed.
     */
    @Override
    public String toString() {
        return Character.toString(this.character);
    }
}
